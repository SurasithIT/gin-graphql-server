package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"strconv"
	"surasithit/gin-graphql-server/graph/model"
	playerModel "surasithit/gin-graphql-server/players/model"
	teamModel "surasithit/gin-graphql-server/teams/model"
)

// CreateTeam is the resolver for the createTeam field.
func (r *mutationResolver) CreateTeam(ctx context.Context, input model.TeamInput) (*model.Team, error) {
	newTeam := &teamModel.Team{
		Name:    input.Name,
		Country: input.Country,
	}
	team, err := r.TeamService.Create(ctx, newTeam)
	if err != nil {
		return nil, err
	}
	return &model.Team{
		ID:      team.ID,
		Name:    team.Name,
		Country: team.Country,
	}, nil
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, id string, input model.TeamInput) (*model.Team, error) {
	updateTeam := &teamModel.Team{
		Name:    input.Name,
		Country: input.Country,
	}
	_id, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	team, err := r.TeamService.Update(ctx, _id, updateTeam)
	if err != nil {
		return nil, err
	}
	return &model.Team{
		ID:      team.ID,
		Name:    team.Name,
		Country: team.Country,
	}, nil
}

// DeleteTeam is the resolver for the deleteTeam field.
func (r *mutationResolver) DeleteTeam(ctx context.Context, id string) (bool, error) {
	_id, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}
	err = r.TeamService.Delete(ctx, _id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreatePlayer is the resolver for the createPlayer field.
func (r *mutationResolver) CreatePlayer(ctx context.Context, input model.PlayerInput) (*model.Player, error) {
	teamId, err := strconv.Atoi(input.TeamID)
	if err != nil {
		return nil, err
	}
	newPlayer := &playerModel.Player{
		Name:   input.Name,
		Rating: input.Rating,
		TeamID: teamId,
	}
	player, err := r.PlayerService.Create(ctx, newPlayer)
	if err != nil {
		return nil, err
	}
	return &model.Player{
		ID:     player.ID,
		Name:   player.Name,
		Rating: player.Rating,
	}, nil
}

// UpdatePlayer is the resolver for the updatePlayer field.
func (r *mutationResolver) UpdatePlayer(ctx context.Context, id string, input model.PlayerInput) (*model.Player, error) {
	_id, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	teamId, err := strconv.Atoi(input.TeamID)
	if err != nil {
		return nil, err
	}
	updatePlayer := &playerModel.Player{
		Name:   input.Name,
		Rating: input.Rating,
		TeamID: teamId,
	}
	player, err := r.PlayerService.Update(ctx, _id, updatePlayer)
	if err != nil {
		return nil, err
	}
	return &model.Player{
		ID:     player.ID,
		Name:   player.Name,
		Rating: player.Rating,
	}, nil
}

// DeletePlayer is the resolver for the deletePlayer field.
func (r *mutationResolver) DeletePlayer(ctx context.Context, id string) (bool, error) {
	_id, err := strconv.Atoi(id)
	if err != nil {
		return false, err
	}
	err = r.PlayerService.Delete(ctx, _id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Team is the resolver for the team field.
func (r *queryResolver) Team(ctx context.Context, id string) (*model.Team, error) {
	_id, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	team, err := r.TeamService.FindOne(ctx, _id)
	if err != nil {
		return nil, err
	}
	return &model.Team{
		ID:      team.ID,
		Name:    team.Name,
		Country: team.Country,
	}, nil
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context) ([]*model.Team, error) {
	teams, err := r.TeamService.FindAll(ctx)
	if err != nil {
		return nil, err
	}
	teamsRes := []*model.Team{}
	for _, t := range teams {
		teamsRes = append(teamsRes, &model.Team{
			ID:      t.ID,
			Name:    t.Name,
			Country: t.Country,
		})
	}
	return teamsRes, nil
}

// Player is the resolver for the player field.
func (r *queryResolver) Player(ctx context.Context, id string) (*model.Player, error) {
	_id, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	player, err := r.PlayerService.FindOne(ctx, _id)
	if err != nil {
		return nil, err
	}
	return &model.Player{
		ID:     player.ID,
		Name:   player.Name,
		Rating: player.Rating,
	}, nil
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context) ([]*model.Player, error) {
	players, err := r.PlayerService.FindAll(ctx)
	if err != nil {
		return nil, err
	}
	playersRes := []*model.Player{}
	for _, t := range players {
		playersRes = append(playersRes, &model.Player{
			ID:     t.ID,
			Name:   t.Name,
			Rating: t.Rating,
		})
	}
	return playersRes, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
