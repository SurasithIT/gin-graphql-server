package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"fmt"
	"surasithit/gin-graphql-server/graph/model"
)

// CreateTeam is the resolver for the createTeam field.
func (r *mutationResolver) CreateTeam(ctx context.Context, input model.TeamInput) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: CreateTeam - createTeam"))
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, id string, input model.TeamInput) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: UpdateTeam - updateTeam"))
}

// DeleteTeam is the resolver for the deleteTeam field.
func (r *mutationResolver) DeleteTeam(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTeam - deleteTeam"))
}

// CreatePlayer is the resolver for the createPlayer field.
func (r *mutationResolver) CreatePlayer(ctx context.Context, intpu model.PlayerInput) (*model.Player, error) {
	panic(fmt.Errorf("not implemented: CreatePlayer - createPlayer"))
}

// UpdatePlayer is the resolver for the updatePlayer field.
func (r *mutationResolver) UpdatePlayer(ctx context.Context, id string, input model.PlayerInput) (*model.Player, error) {
	panic(fmt.Errorf("not implemented: UpdatePlayer - updatePlayer"))
}

// DeletePlayer is the resolver for the deletePlayer field.
func (r *mutationResolver) DeletePlayer(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePlayer - deletePlayer"))
}

// Team is the resolver for the team field.
func (r *queryResolver) Team(ctx context.Context, id string) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: Team - team"))
}

// Teams is the resolver for the teams field.
func (r *queryResolver) Teams(ctx context.Context) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: Teams - teams"))
}

// Player is the resolver for the player field.
func (r *queryResolver) Player(ctx context.Context, id string) (*model.Player, error) {
	panic(fmt.Errorf("not implemented: Player - player"))
}

// Players is the resolver for the players field.
func (r *queryResolver) Players(ctx context.Context) ([]*model.Player, error) {
	panic(fmt.Errorf("not implemented: Players - players"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
